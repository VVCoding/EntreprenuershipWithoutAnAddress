{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\n\n// Initialize database schema\nasync function initDb() {\n  try {\n    // First, check if the users table exists\n    const tableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'users'\n      );\n    `);\n\n    if (!tableExists.rows[0].exists) {\n      // Create the users table if it doesn't exist\n      await pool.query(`\n        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n        CREATE TABLE users (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('entrepreneur', 'investor')),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    } else {\n      // If table exists, check if user_type column exists\n      const columnExists = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.columns \n          WHERE table_name = 'users' AND column_name = 'user_type'\n        );\n      `);\n\n      if (!columnExists.rows[0].exists) {\n        // Add user_type column if it doesn't exist\n        await pool.query(`\n          ALTER TABLE users \n          ADD COLUMN user_type VARCHAR(20) NOT NULL DEFAULT 'entrepreneur' \n          CHECK (user_type IN ('entrepreneur', 'investor'));\n        `);\n      }\n    }\n\n    // Check if pitches table exists\n    const pitchesTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitches'\n      );\n    `);\n\n    if (!pitchesTableExists.rows[0].exists) {\n      // Create pitches table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitches (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          title VARCHAR(255) NOT NULL,\n          description TEXT NOT NULL,\n          video_url VARCHAR(255) NOT NULL,\n          looking_for TEXT NOT NULL,\n          views INTEGER DEFAULT 0,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n\n    // Check if pitch_views table exists\n    const viewsTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitch_views'\n      );\n    `);\n\n    if (!viewsTableExists.rows[0].exists) {\n      // Create pitch_views table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitch_views (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          pitch_id UUID REFERENCES pitches(id) ON DELETE CASCADE,\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          viewed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(pitch_id, user_id)\n        );\n      `);\n    }\n\n    console.log('Database schema initialized');\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\n// Only initialize the database if we're in development mode\nif (process.env.NODE_ENV === 'development') {\n  initDb();\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEA,6BAA6B;AAC7B,eAAe;IACb,IAAI;QACF,yCAAyC;QACzC,MAAM,cAAc,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAKtC,CAAC;QAED,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAC/B,6CAA6C;YAC7C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;MASlB,CAAC;QACH,OAAO;YACL,oDAAoD;YACpD,MAAM,eAAe,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;MAKvC,CAAC;YAED,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;gBAChC,2CAA2C;gBAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;QAIlB,CAAC;YACH;QACF;QAEA,gCAAgC;QAChC,MAAM,qBAAqB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK7C,CAAC;QAED,IAAI,CAAC,mBAAmB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACtC,2CAA2C;YAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;;;MAWlB,CAAC;QACH;QAEA,oCAAoC;QACpC,MAAM,mBAAmB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK3C,CAAC;QAED,IAAI,CAAC,iBAAiB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACpC,+CAA+C;YAC/C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;MAQlB,CAAC;QACH;QAEA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF;AAEA,4DAA4D;AAC5D,wCAA4C;IAC1C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport pool from '@/lib/db';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, password, userType } = await req.json();\n    \n    if (!email || !password || !userType) {\n      return NextResponse.json(\n        { error: 'Email, password, and user type are required' },\n        { status: 400 }\n      );\n    }\n\n    if (!['entrepreneur', 'investor'].includes(userType)) {\n      return NextResponse.json(\n        { error: 'Invalid user type' },\n        { status: 400 }\n      );\n    }\n\n    const saltRounds = 10;\n    const passwordHash = await bcrypt.hash(password, saltRounds);\n    \n    const result = await pool.query(\n      'INSERT INTO users (email, password_hash, user_type) VALUES ($1, $2, $3) RETURNING id, email, user_type, created_at',\n      [email, passwordHash, userType]\n    );\n    \n    return NextResponse.json(result.rows[0], { status: 201 });\n  } catch (error: any) {\n    if (error.code === '23505') {\n      return NextResponse.json(\n        { error: 'Email already exists' },\n        { status: 409 }\n      );\n    }\n    console.error('Registration error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEpD,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC;YAAC;YAAgB;SAAW,CAAC,QAAQ,CAAC,WAAW;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa;QACnB,MAAM,eAAe,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEjD,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAC7B,sHACA;YAAC;YAAO;YAAc;SAAS;QAGjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,EAAE,EAAE;YAAE,QAAQ;QAAI;IACzD,EAAE,OAAO,OAAY;QACnB,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QACA,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}