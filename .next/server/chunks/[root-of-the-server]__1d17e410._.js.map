{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\n\n// Initialize database schema\nasync function initDb() {\n  try {\n    // First, check if the users table exists\n    const tableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'users'\n      );\n    `);\n\n    if (!tableExists.rows[0].exists) {\n      // Create the users table if it doesn't exist\n      await pool.query(`\n        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n        CREATE TABLE users (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('entrepreneur', 'investor')),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    } else {\n      // If table exists, check if user_type column exists\n      const columnExists = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.columns \n          WHERE table_name = 'users' AND column_name = 'user_type'\n        );\n      `);\n\n      if (!columnExists.rows[0].exists) {\n        // Add user_type column if it doesn't exist\n        await pool.query(`\n          ALTER TABLE users \n          ADD COLUMN user_type VARCHAR(20) NOT NULL DEFAULT 'entrepreneur' \n          CHECK (user_type IN ('entrepreneur', 'investor'));\n        `);\n      }\n    }\n\n    // Check if pitches table exists\n    const pitchesTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitches'\n      );\n    `);\n\n    if (!pitchesTableExists.rows[0].exists) {\n      // Create pitches table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitches (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          title VARCHAR(255) NOT NULL,\n          description TEXT NOT NULL,\n          video_url VARCHAR(255) NOT NULL,\n          looking_for TEXT NOT NULL,\n          views INTEGER DEFAULT 0,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n\n    // Check if pitch_views table exists\n    const viewsTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitch_views'\n      );\n    `);\n\n    if (!viewsTableExists.rows[0].exists) {\n      // Create pitch_views table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitch_views (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          pitch_id UUID REFERENCES pitches(id) ON DELETE CASCADE,\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          viewed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(pitch_id, user_id)\n        );\n      `);\n    }\n\n    console.log('Database schema initialized');\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\n// Only initialize the database if we're in development mode\nif (process.env.NODE_ENV === 'development') {\n  initDb();\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEA,6BAA6B;AAC7B,eAAe;IACb,IAAI;QACF,yCAAyC;QACzC,MAAM,cAAc,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAKtC,CAAC;QAED,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAC/B,6CAA6C;YAC7C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;MASlB,CAAC;QACH,OAAO;YACL,oDAAoD;YACpD,MAAM,eAAe,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;MAKvC,CAAC;YAED,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;gBAChC,2CAA2C;gBAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;QAIlB,CAAC;YACH;QACF;QAEA,gCAAgC;QAChC,MAAM,qBAAqB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK7C,CAAC;QAED,IAAI,CAAC,mBAAmB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACtC,2CAA2C;YAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;;;MAWlB,CAAC;QACH;QAEA,oCAAoC;QACpC,MAAM,mBAAmB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK3C,CAAC;QAED,IAAI,CAAC,iBAAiB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACpC,+CAA+C;YAC/C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;MAQlB,CAAC;QACH;QAEA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF;AAEA,4DAA4D;AAC5D,wCAA4C;IAC1C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/pitches/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport pool from '@/lib/db';\n\nexport async function GET(req: NextRequest) {\n  try {\n    const session = await getServerSession();\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user type from database to ensure accuracy\n    const userResult = await pool.query(\n      'SELECT user_type FROM users WHERE email = $1',\n      [session.user.email]\n    );\n\n    if (!userResult.rows[0]) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const userType = userResult.rows[0].user_type;\n    let query: string;\n    let params: string[];\n\n    if (userType === 'investor') {\n      // For investors, get all pitches with user email\n      query = `\n        SELECT p.*, u.email as user_email \n        FROM pitches p \n        JOIN users u ON p.user_id = u.id \n        ORDER BY p.created_at DESC\n      `;\n      params = [];\n    } else {\n      // For entrepreneurs, get only their pitches\n      query = `\n        SELECT * FROM pitches \n        WHERE user_id = (SELECT id FROM users WHERE email = $1) \n        ORDER BY created_at DESC\n      `;\n      params = [session.user.email];\n    }\n\n    const result = await pool.query(query, params);\n    return NextResponse.json(result.rows);\n  } catch (error) {\n    console.error('Error fetching pitches:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const session = await getServerSession();\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user type from database to ensure accuracy\n    const userResult = await pool.query(\n      'SELECT user_type FROM users WHERE email = $1',\n      [session.user.email]\n    );\n\n    if (!userResult.rows[0] || userResult.rows[0].user_type !== 'entrepreneur') {\n      return NextResponse.json(\n        { error: 'Only entrepreneurs can create pitches' },\n        { status: 403 }\n      );\n    }\n\n    const { title, description, video_url, looking_for } = await req.json();\n\n    // Validate required fields\n    if (!title || !description || !video_url || !looking_for) {\n      return NextResponse.json(\n        { error: 'Missing required fields', details: 'Title, description, video URL, and looking for are required' },\n        { status: 400 }\n      );\n    }\n\n    // Insert new pitch\n    const result = await pool.query(\n      `INSERT INTO pitches (user_id, title, description, video_url, looking_for)\n       VALUES ((SELECT id FROM users WHERE email = $1), $2, $3, $4, $5)\n       RETURNING *`,\n      [session.user.email, title, description, video_url, looking_for]\n    );\n\n    return NextResponse.json(result.rows[0], { status: 201 });\n  } catch (error) {\n    console.error('Error creating pitch:', error);\n    return NextResponse.json(\n      { \n        error: 'Internal server error', \n        details: error instanceof Error ? error.message : 'Unknown error',\n        stack: error instanceof Error ? error.stack : undefined\n      },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}