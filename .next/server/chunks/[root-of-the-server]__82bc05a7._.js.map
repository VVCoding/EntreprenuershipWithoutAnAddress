{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { join } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport { existsSync } from 'fs';\n\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\nexport async function POST(req: NextRequest) {\n  try {\n    const formData = await req.formData();\n    const file = formData.get('video') as File;\n    \n    if (!file) {\n      return NextResponse.json(\n        { error: 'No file uploaded' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type\n    if (!file.type.startsWith('video/')) {\n      return NextResponse.json(\n        { error: 'Invalid file type. Please upload a video file.' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (100MB limit)\n    if (file.size > 100 * 1024 * 1024) {\n      return NextResponse.json(\n        { error: 'File size must be less than 100MB' },\n        { status: 400 }\n      );\n    }\n\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Generate a unique filename\n    const uniqueId = uuidv4();\n    const extension = file.name.split('.').pop();\n    const filename = `${uniqueId}.${extension}`;\n\n    // Ensure uploads directory exists\n    const uploadDir = join(process.cwd(), 'public', 'uploads');\n    if (!existsSync(uploadDir)) {\n      await mkdir(uploadDir, { recursive: true });\n    }\n\n    // Save the file to the public/uploads directory\n    const filepath = join(uploadDir, filename);\n    await writeFile(filepath, buffer);\n\n    // Return the URL where the file can be accessed\n    const url = `/uploads/${filename}`;\n    return NextResponse.json({ url });\n  } catch (error) {\n    console.error('Upload error:', error);\n    return NextResponse.json(\n      { error: 'Failed to upload file', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,UAAU;AAChB,MAAM,aAAa;AAEnB,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,IAAI,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,WAAW;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiD,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,IAAI,KAAK,IAAI,GAAG,MAAM,OAAO,MAAM;YACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,6BAA6B;QAC7B,MAAM,WAAW,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD;QACtB,MAAM,YAAY,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG;QAC1C,MAAM,WAAW,GAAG,SAAS,CAAC,EAAE,WAAW;QAE3C,kCAAkC;QAClC,MAAM,YAAY,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI,UAAU;QAChD,IAAI,CAAC,CAAA,GAAA,6FAAA,CAAA,aAAU,AAAD,EAAE,YAAY;YAC1B,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,WAAW;gBAAE,WAAW;YAAK;QAC3C;QAEA,gDAAgD;QAChD,MAAM,WAAW,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,WAAW;QACjC,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,gDAAgD;QAChD,MAAM,MAAM,CAAC,SAAS,EAAE,UAAU;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAI;IACjC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACpG;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}