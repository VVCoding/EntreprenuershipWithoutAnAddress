{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\n\n// Initialize database schema\nasync function initDb() {\n  try {\n    // First, check if the users table exists\n    const tableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'users'\n      );\n    `);\n\n    if (!tableExists.rows[0].exists) {\n      // Create the users table if it doesn't exist\n      await pool.query(`\n        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n        CREATE TABLE users (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('entrepreneur', 'investor')),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    } else {\n      // If table exists, check if user_type column exists\n      const columnExists = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.columns \n          WHERE table_name = 'users' AND column_name = 'user_type'\n        );\n      `);\n\n      if (!columnExists.rows[0].exists) {\n        // Add user_type column if it doesn't exist\n        await pool.query(`\n          ALTER TABLE users \n          ADD COLUMN user_type VARCHAR(20) NOT NULL DEFAULT 'entrepreneur' \n          CHECK (user_type IN ('entrepreneur', 'investor'));\n        `);\n      }\n    }\n\n    // Check if pitches table exists\n    const pitchesTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitches'\n      );\n    `);\n\n    if (!pitchesTableExists.rows[0].exists) {\n      // Create pitches table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitches (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          title VARCHAR(255) NOT NULL,\n          description TEXT NOT NULL,\n          video_url VARCHAR(255) NOT NULL,\n          looking_for TEXT NOT NULL,\n          views INTEGER DEFAULT 0,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    }\n\n    // Check if pitch_views table exists\n    const viewsTableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'pitch_views'\n      );\n    `);\n\n    if (!viewsTableExists.rows[0].exists) {\n      // Create pitch_views table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE pitch_views (\n          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n          pitch_id UUID REFERENCES pitches(id) ON DELETE CASCADE,\n          user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n          viewed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(pitch_id, user_id)\n        );\n      `);\n    }\n\n    console.log('Database schema initialized');\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\n// Only initialize the database if we're in development mode\nif (process.env.NODE_ENV === 'development') {\n  initDb();\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEA,6BAA6B;AAC7B,eAAe;IACb,IAAI;QACF,yCAAyC;QACzC,MAAM,cAAc,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAKtC,CAAC;QAED,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAC/B,6CAA6C;YAC7C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;MASlB,CAAC;QACH,OAAO;YACL,oDAAoD;YACpD,MAAM,eAAe,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;MAKvC,CAAC;YAED,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;gBAChC,2CAA2C;gBAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;QAIlB,CAAC;YACH;QACF;QAEA,gCAAgC;QAChC,MAAM,qBAAqB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK7C,CAAC;QAED,IAAI,CAAC,mBAAmB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACtC,2CAA2C;YAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;;;MAWlB,CAAC;QACH;QAEA,oCAAoC;QACpC,MAAM,mBAAmB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAK3C,CAAC;QAED,IAAI,CAAC,iBAAiB,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YACpC,+CAA+C;YAC/C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;MAQlB,CAAC;QACH;QAEA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF;AAEA,4DAA4D;AAC5D,wCAA4C;IAC1C;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/pitches/%5Bid%5D/views/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport pool from '@/lib/db';\n\nexport async function POST(\n  req: NextRequest,\n  context: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession();\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    // Get user type and ID from database\n    const userResult = await pool.query(\n      'SELECT id, user_type FROM users WHERE email = $1',\n      [session.user.email]\n    );\n\n    if (!userResult.rows[0] || userResult.rows[0].user_type !== 'investor') {\n      return NextResponse.json(\n        { error: 'Only investors can view pitches' },\n        { status: 403 }\n      );\n    }\n\n    const pitchId = context.params.id;\n    const userId = userResult.rows[0].id;\n\n    // Start a transaction\n    const client = await pool.connect();\n    try {\n      await client.query('BEGIN');\n\n      // Try to insert a new view record\n      const insertResult = await client.query(\n        `INSERT INTO pitch_views (pitch_id, user_id)\n         VALUES ($1, $2)\n         ON CONFLICT (pitch_id, user_id) DO NOTHING\n         RETURNING id`,\n        [pitchId, userId]\n      );\n\n      // If a new view was recorded, update the pitch's view count\n      if (insertResult.rows.length > 0) {\n        const updateResult = await client.query(\n          `UPDATE pitches \n           SET views = (\n             SELECT COUNT(DISTINCT user_id) \n             FROM pitch_views \n             WHERE pitch_id = $1\n           )\n           WHERE id = $1 \n           RETURNING views`,\n          [pitchId]\n        );\n\n        if (updateResult.rows.length === 0) {\n          throw new Error('Pitch not found');\n        }\n\n        await client.query('COMMIT');\n        return NextResponse.json({ views: updateResult.rows[0].views });\n      } else {\n        // If no new view was recorded (investor already viewed), get current view count\n        const viewCountResult = await client.query(\n          `SELECT COUNT(DISTINCT user_id) as views\n           FROM pitch_views \n           WHERE pitch_id = $1`,\n          [pitchId]\n        );\n\n        await client.query('COMMIT');\n        return NextResponse.json({ views: parseInt(viewCountResult.rows[0].views) });\n      }\n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n  } catch (error) {\n    console.error('Error updating view count:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;;;;;AAEO,eAAe,KACpB,GAAgB,EAChB,OAAmC;IAEnC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD;QACrC,IAAI,CAAC,SAAS,MAAM,OAAO;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,qCAAqC;QACrC,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CACjC,oDACA;YAAC,QAAQ,IAAI,CAAC,KAAK;SAAC;QAGtB,IAAI,CAAC,WAAW,IAAI,CAAC,EAAE,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC,SAAS,KAAK,YAAY;YACtE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,QAAQ,MAAM,CAAC,EAAE;QACjC,MAAM,SAAS,WAAW,IAAI,CAAC,EAAE,CAAC,EAAE;QAEpC,sBAAsB;QACtB,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,OAAO;QACjC,IAAI;YACF,MAAM,OAAO,KAAK,CAAC;YAEnB,kCAAkC;YAClC,MAAM,eAAe,MAAM,OAAO,KAAK,CACrC,CAAC;;;qBAGY,CAAC,EACd;gBAAC;gBAAS;aAAO;YAGnB,4DAA4D;YAC5D,IAAI,aAAa,IAAI,CAAC,MAAM,GAAG,GAAG;gBAChC,MAAM,eAAe,MAAM,OAAO,KAAK,CACrC,CAAC;;;;;;;0BAOe,CAAC,EACjB;oBAAC;iBAAQ;gBAGX,IAAI,aAAa,IAAI,CAAC,MAAM,KAAK,GAAG;oBAClC,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,OAAO,KAAK,CAAC;gBACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO,aAAa,IAAI,CAAC,EAAE,CAAC,KAAK;gBAAC;YAC/D,OAAO;gBACL,gFAAgF;gBAChF,MAAM,kBAAkB,MAAM,OAAO,KAAK,CACxC,CAAC;;8BAEmB,CAAC,EACrB;oBAAC;iBAAQ;gBAGX,MAAM,OAAO,KAAK,CAAC;gBACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO,SAAS,gBAAgB,IAAI,CAAC,EAAE,CAAC,KAAK;gBAAE;YAC5E;QACF,EAAE,OAAO,OAAO;YACd,MAAM,OAAO,KAAK,CAAC;YACnB,MAAM;QACR,SAAU;YACR,OAAO,OAAO;QAChB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACpG;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}