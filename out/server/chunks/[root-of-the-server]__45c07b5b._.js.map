{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false },\n});\n\nexport default pool;\n"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,OAAO,IAAI,KAAK;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QAAE,oBAAoB;IAAM;AACnC;uCAEe","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/auth/login/route.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport pool from '@/lib/db';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, password } = await req.json();\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      );\n    }\n    const result = await pool.query(\n      'SELECT id, email, password_hash FROM users WHERE email = $1',\n      [email]\n    );\n    const user = result.rows[0];\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n    const passwordMatch = await bcrypt.compare(password, user.password_hash);\n    if (!passwordMatch) {\n      return NextResponse.json(\n        { error: 'Invalid credentials' },\n        { status: 401 }\n      );\n    }\n    const { password_hash, ...userData } = user;\n    return NextResponse.json(userData);\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAC7B,+DACA;YAAC;SAAM;QAET,MAAM,OAAO,OAAO,IAAI,CAAC,EAAE;QAC3B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,aAAa;QACvE,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,EAAE,aAAa,EAAE,GAAG,UAAU,GAAG;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}