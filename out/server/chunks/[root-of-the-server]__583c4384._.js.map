{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/lib/db.ts"],"sourcesContent":["import { Pool } from 'pg';\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: false\n  }\n});\n\n// Initialize database schema\nasync function initDb() {\n  try {\n    // First, check if the users table exists\n    const tableExists = await pool.query(`\n      SELECT EXISTS (\n        SELECT FROM information_schema.tables \n        WHERE table_name = 'users'\n      );\n    `);\n\n    if (!tableExists.rows[0].exists) {\n      // Create the users table if it doesn't exist\n      await pool.query(`\n        CREATE TABLE users (\n          id SERIAL PRIMARY KEY,\n          email VARCHAR(255) UNIQUE NOT NULL,\n          password_hash VARCHAR(255) NOT NULL,\n          user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('entrepreneur', 'investor')),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        );\n      `);\n    } else {\n      // If table exists, check if user_type column exists\n      const columnExists = await pool.query(`\n        SELECT EXISTS (\n          SELECT FROM information_schema.columns \n          WHERE table_name = 'users' AND column_name = 'user_type'\n        );\n      `);\n\n      if (!columnExists.rows[0].exists) {\n        // Add user_type column if it doesn't exist\n        await pool.query(`\n          ALTER TABLE users \n          ADD COLUMN user_type VARCHAR(20) NOT NULL DEFAULT 'entrepreneur' \n          CHECK (user_type IN ('entrepreneur', 'investor'));\n        `);\n      }\n    }\n\n    // Create pitches table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS pitches (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        title VARCHAR(255) NOT NULL,\n        description TEXT NOT NULL,\n        video_url VARCHAR(255) NOT NULL,\n        looking_for TEXT NOT NULL,\n        views INTEGER DEFAULT 0,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n\n    console.log('Database schema initialized');\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\ninitDb();\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEA,6BAA6B;AAC7B,eAAe;IACb,IAAI;QACF,yCAAyC;QACzC,MAAM,cAAc,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;IAKtC,CAAC;QAED,IAAI,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;YAC/B,6CAA6C;YAC7C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;MAQlB,CAAC;QACH,OAAO;YACL,oDAAoD;YACpD,MAAM,eAAe,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;MAKvC,CAAC;YAED,IAAI,CAAC,aAAa,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE;gBAChC,2CAA2C;gBAC3C,MAAM,KAAK,KAAK,CAAC,CAAC;;;;QAIlB,CAAC;YACH;QACF;QAEA,uBAAuB;QACvB,MAAM,KAAK,KAAK,CAAC,CAAC;;;;;;;;;;;IAWlB,CAAC;QAED,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;IAChD;AACF;AAEA;uCAEe","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///Users/gayatrivohra/Downloads/EntreprenuershipWithoutAnAddress-main/Add-Navbar-Link/site/entrepreneurship-without-address/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport bcrypt from 'bcryptjs';\nimport pool from '@/lib/db';\n\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n\nconst handler = NextAuth({\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('Email and password are required');\n        }\n\n        const result = await pool.query(\n          'SELECT id, email, password_hash, user_type FROM users WHERE email = $1',\n          [credentials.email]\n        );\n        const user = result.rows[0];\n\n        if (!user) {\n          throw new Error('Invalid credentials');\n        }\n\n        const passwordMatch = await bcrypt.compare(credentials.password, user.password_hash);\n        if (!passwordMatch) {\n          throw new Error('Invalid credentials');\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          userType: user.user_type,\n        };\n      }\n    })\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.userType = user.userType;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.userType = token.userType;\n      }\n      return session;\n    }\n  },\n  pages: {\n    signIn: '/login',\n    signOut: '/',\n    error: '/login',\n  },\n  session: {\n    strategy: 'jwt',\n  },\n});\n\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;AAEO,MAAM,UAAU;AAChB,MAAM,aAAa;AAE1B,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAC7B,0EACA;oBAAC,YAAY,KAAK;iBAAC;gBAErB,MAAM,OAAO,OAAO,IAAI,CAAC,EAAE;gBAE3B,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,aAAa;gBACnF,IAAI,CAAC,eAAe;oBAClB,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,UAAU,KAAK,SAAS;gBAC1B;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}}]
}